#!/usr/bin/bash -x
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh

echo foobar

COMMAND="$1"
KERNEL_VERSION="$2"
ENTRY_DIR_ABS="$3"
KERNEL_IMAGE="$4"
INITRD_OPTIONS_START="5"

if ! [[ $KERNEL_INSTALL_MACHINE_ID ]]; then
    exit 0
fi

MACHINE_ID=$KERNEL_INSTALL_MACHINE_ID

BOOT_ROOT=${ENTRY_DIR_ABS%/$MACHINE_ID/$KERNEL_VERSION}
EFI_RELDIR="fedora-systemd"
#BOOT_MNT=$(stat -c %m $BOOT_ROOT)
#ENTRY_DIR=/${ENTRY_DIR_ABS#$BOOT_MNT}

# always remove the entry, even on add-command, efibootmgr can't update
BOOTMGR_BOOTNUM=$(efibootmgr | grep $KERNEL_VERSION | cut -b 5-8)
if [[ $BOOTMGR_BOOTNUM ]]; then
    efibootmgr --bootnum $BOOTMGR_BOOTNUM --delete-bootnum --quiet
fi


if [[ $COMMAND == remove ]]; then
    # we're done
    exit 0
fi

if ! [[ $COMMAND == add ]]; then
    # error if command is not remove or add
    exit 1
fi

if ! [[ $KERNEL_IMAGE ]]; then
    exit 1
fi

if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    OS_RELEASE_FILE="/etc/os-release"
elif [[ -f /usr/lib/os-release ]]; then
    . /usr/lib/os-release
    OS_RELEASE_FILE="/usr/lib/os-release"
fi

if ! [[ $PRETTY_NAME ]]; then
    PRETTY_NAME="Linux $KERNEL_VERSION"
fi

if [[ -f /etc/kernel/cmdline ]]; then
    read -r -d '' -a BOOT_OPTIONS < /etc/kernel/cmdline
elif [[ -f /usr/lib/kernel/cmdline ]]; then
    read -r -d '' -a BOOT_OPTIONS < /usr/lib/kernel/cmdline
else
    declare -a BOOT_OPTIONS

    read -r -d '' -a line < /proc/cmdline
    for i in "${line[@]}"; do
        # filter initrd and boot_image from options when booting from grub
        [[ "${i#initrd=*}" != "$i" ]] && continue
        [[ "${i#BOOT_IMAGE=*}" != "$i" ]] && continue
        BOOT_OPTIONS+=("$i")
    done
fi

trap 'rm -f "$CMDLINE_FILE"' EXIT
CMDLINE_FILE=$(mktemp -t bootoptions.XXXXXX)
echo "${BOOT_OPTIONS[*]}" > "$CMDLINE_FILE"

objcopy \
    --add-section .osrel="$OS_RELEASE_FILE" --change-section-vma .osrel=0x20000 \
    --add-section .cmdline="$CMDLINE_FILE" --change-section-vma .cmdline=0x30000 \
    --add-section .linux="$BOOT_ROOT/vmlinuz-$KERNEL_VERSION" --change-section-vma .linux=0x40000 \
    --add-section .initrd="$BOOT_ROOT/initramfs-$KERNEL_VERSION.img" --change-section-vma .initrd=0x30000000 \
    "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "/boot/efi/EFI/$EFI_RELDIR/$KERNEL_VERSION.efi"

# TODO: get mount-point and disk of currently used efi-partition
efibootmgr --create --disk /dev/sda1 --part 1 --label "${NAME} (${KERNEL_VERSION}) ${VERSION}" --loader "\\EFI\\$EFI_RELDIR\\${KERNEL_VERSION}.efi" --quiet

exit 0


INITRD_OPTIONS=( "${@:${INITRD_OPTIONS_START}}" )

for initrd in "${INITRD_OPTIONS[@]}"; do
    if [[ -f "${initrd}" ]]; then
        initrd_basename="$(basename ${initrd})"
        [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && \
            echo "Installing $ENTRY_DIR_ABS/${initrd_basename}"
        cp "${initrd}" "$ENTRY_DIR_ABS/${initrd_basename}" &&
            chown root:root "$ENTRY_DIR_ABS/${initrd_basename}" &&
            chmod 0644 "$ENTRY_DIR_ABS/${initrd_basename}" || {
             echo "Could not copy '${initrd}' to '$ENTRY_DIR_ABS/${initrd_basename}'." >&2
             exit 1
        }
    fi
done

# If no initrd option is supplied, fallback to "initrd" which is
# the name used by dracut when generating it in its kernel-install hook
[[ ${#INITRD_OPTIONS[@]} == 0 ]] && INITRD_OPTIONS=( initrd )

mkdir -p "${LOADER_ENTRY%/*}" || {
    echo "Could not create loader entry directory '${LOADER_ENTRY%/*}'." >&2
    exit 1
}

[ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && \
    echo "Creating $LOADER_ENTRY"
{
    echo "title      $PRETTY_NAME"
    echo "version    $KERNEL_VERSION"
    echo "machine-id $MACHINE_ID"
    echo "options    ${BOOT_OPTIONS[*]}"
    echo "linux      $ENTRY_DIR/linux"
    for initrd in "${INITRD_OPTIONS[@]}"; do
        [[ -f $ENTRY_DIR_ABS/$(basename ${initrd}) ]] && \
            echo "initrd     $ENTRY_DIR/$(basename ${initrd})"
    done
    :
} > "$LOADER_ENTRY" || {
    echo "Could not create loader entry '$LOADER_ENTRY'." >&2
    exit 1
}
exit 0
